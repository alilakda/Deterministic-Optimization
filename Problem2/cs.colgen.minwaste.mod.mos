model CuttingStockColGen	! Name the model

uses "mmxprs"	! include the Xpress solver package

! Pricing function solves the Pricing problem. You will need to write the content of the function in the later part of the code
! here is the initial declaration of the function
forward function Pricing(y: array(range) of real, W: integer, w: array(range) of integer) : real

m := 8                                               ! the number of different small rolls

declarations										   ! declare sets, arrays, constraints, and variables

	dRange = 1 .. m                                    ! the index range of demand
	pRange : range                                     ! the index range of patterns
	W : integer										   ! width of the large roll
	w : array(dRange) of integer                       ! widths of the small rolls
	b : array(dRange) of integer                  	   ! demands of the small rolls

	initialPatterns: array(dRange, pRange) of integer  ! set of initial patterns to start the column generation
	newPattern: array(dRange) of real                  ! the newly generated pattern by the Pricing problem
	numPatterns: integer                               ! number of patterns in the restricted master problem
	Z : real 			                               ! Pricing objective value
	dualVar : array(dRange) of real                    ! dual variables for the demand constraints
	DemandConstr: array(dRange) of linctr              ! Demand constraints
	waste : linctr	                    	           ! objective value of cutting stock restricted master problem
	x : dynamic array(pRange) of mpvar                 ! decision variable: number of rolls cut in each pattern

end-declarations									   ! end declarations section


! initialization from data file
! test on different data files cs1.dat, cs2.dat, cs3.dat, and report results for each instance
!!!!!!!!!!!!!!!!!! write your code here !!!!!!!!!!!!!!!!!!!!!!!!!!!
initializations from 'cs1.dat'
!initializations from 'cs2.dat'
!initializations from 'cs3.dat'
!initializations from 'kant1.dat'
	W w b
end-initializations

! Column generation needs to start from a subset of initial columns ir patterns
! As discussed in class, you can easily find a subset of m initial patterns which generates a basic feasible solution
! Choose the subset of initial patterns and save them in the array initialPatterns
!!!!!!!!!!!!!!!!!! Write your code here !!!!!!!!!!!!!!!!!!!!!!!!!!!

forall(i in dRange) do
	initialPatterns(i,i) := 1
end-do

! set the number of initial patterns
! this number will need to be updated everytime a new pattern is generated
numPatterns := m

! create the corresponding x variables and set the nonnegativity constraints
!!!!!!!!!!!!!!!!! Write your code here !!!!!!!!!!!!!!!!!!!!!!!!!!
forall(p in dRange) do
	create(x(p))
	x(p) >= 0
end-do


! Create demand constraints using the initialPatterns and the variables x created above.
! These constraints need to be named DemandConstr(i) because we'll need to get their shadow prices (i.e. dual variables) later,
! and for us to be able to ask Xpress for shadow prices we need a way to refer to the constraints.
!!!!!!!!!!!!!!!!!!! Write your code here !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
forall(i in dRange) do
	DemandConstr(i) := sum(k in 1..numPatterns) initialPatterns(i,k)*x(k) >= b(i)
end-do
!sum(i in dRange)(x(i)*w(i)) <= W


! Create objective function. The objective needs to be named numRolls
! Just like the demand constraints, we'll need to add variables to it as they get generated.
!!!!!!!!!!!!!!!!!! Write your code here !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
waste := 0.0
forall(k in 1..numPatterns) do
waste += W*x(k) - sum(i in dRange) x(k)*w(i)*initialPatterns(i,k)
end-do

!!!!!!!!!!!! Begin column generation !!!!!!!!!!!!!!!!!!
repeat

	! Solve the problem using the variables that have been generated so far
	! Notice: you may need to use the XPRS_LIN parameter in the minimize command
	minimize(XPRS_LIN, waste)


	! Print the objective value and the solution x
	writeln("Number of Large Rolls = ", getobjval)
	forall (j in 1..numPatterns)
		writeln("x(",j,")=",getsol(x(j)))

	! Get the dual variables (shadow prices)
	! Hint: Check out command "getdual" in the solution manual
	!!!!!!!!!!!!!! write your code here !!!!!!!!!!!!!!!!!!
	forall(i in dRange) do
		dualVar(i) := getdual(DemandConstr(i))
	end-do

	! Call the Pricing function, set Z to be the Pricing objective value
	! for example: Z=Pricing(y,W,z), but you need to figure out what y is.
	!!!!!!!!!!!!!! write your code here !!!!!!!!!!!!!!!!!!

	Z := Pricing(dualVar,W,w)
	writeln("Z = ",Z)

	! If the reduced cost is less than zero (here we use -0.000001 to approximate 0 in order to avoid numerical error)
	if  Z <= -0.000001 then

		! Print out the new pattern found by Pricing problem
		!!!!!!!!!!!!!!! write your code here !!!!!!!!!!!!!!!!!!!

		writeln("NEW PATTERN = ",newPattern)


		!	update the number of patterns generated
		! 	create the new variable
		!	update the constraints for each demand by adding the new pattern generated by Pricing
		!	update the objective function by adding the new pattern
		!!!!!!!!!!!!!!! write your code here  !!!!!!!!!!!!!!

		!	update the number of patterns generated
		numPatterns += 1

		! 	create the new variable
		create(x(numPatterns))
		x(numPatterns) >= 0



		!	update the constraints for each demand by adding the new pattern generated by Pricing
		forall(i in dRange) do
			initialPatterns(i,numPatterns) := integer(newPattern(i))
			DemandConstr(i) += initialPatterns(i,numPatterns)*x(numPatterns)
		end-do

		!	update the objective function by adding the new pattern
		waste += x(numPatterns) * (W- sum(i in dRange) w(i)*initialPatterns(i,numPatterns))


	end-if


until   Z >= -0.000001	! continue until no variable has a good reduced cost
!!!!!!!!!!!! End column generation !!!!!!!!!!!!!!!!!!

writeln("\n===============\n")
! Print a summary of the final LP solution: selected patterns, number of rolls cut using each selected pattern, total number of rolls
!!!!!!!!!!! wrtie your code here !!!!!!!!!!!!!!!!!!

minimize(XPRS_LIN, waste)

writeln("")
forall(i in 1..numPatterns) do
	if getsol(x(i)) > 0 then
		writeln('selected pattern: x(',i,') = ', (getsol(x(i))),' rolls')
		forall(j in 1..m)
			writeln('pattern =', (initialPatterns(j,i)))
	end-if
end-do

writeln('total waste = ', (getobjval))




! We also want to get integer solutions. There are at least two approaches to do this.
! The first approach is to round up the LP solution.
! The second approach is to re-solve the master problem as an integer program using all the generated patterns


! Implement the first approach: rounding the LP solution and print out a summary ofthe solution: number of rolls cut using each selected pattern, total number of rolls
!!!!!!!!!!!!!!!!!!! Write your code here !!!!!!!!!!!!!!!!!!!!!!!!!
writeln("")
forall(i in 1..numPatterns) do
	if getsol(x(i)) > 0 then
		writeln('selected pattern: x(',i,') = ', ceil(getsol(x(i))),' rolls')
	end-if
end-do

writeln('total waste = ', getobjval)


! Implement the second approach: first, constrain all variables to be integer (example: x(j) is_integer), then solve the master problem using all generated patterns
! You also need to print out a summary of the solution: number of rolls cut using each selected pattern, total number of rolls
!!!!!!!!!!!!!!!!!!! Write your code here !!!!!!!!!!!!!!!!!!!!!!!!!
forall(i in 1..numPatterns)do
	x(i) is_integer
end-do


minimize(waste)


writeln("")
forall(i in 1..numPatterns) do
	if getsol(x(i)) > 0 then
		writeln('selected pattern: x(',i,') = ', getsol(x(i)),' rolls')
	end-if
end-do

writeln('total waste = ', getobjval)



function Pricing(y: array(range) of real, W: integer, w: array(range) of integer) : real

	! declare decision variable
	! form constraints and objective
	! do not forget the integrality constraints on the variables
	! solve the problem
	!!!!!!!!!!!! write your code here !!!!!!!!!!!!!!!

	! declare decision variable
	declarations
		len_y = 1..getsize(y)
		a : array(len_y) of mpvar
	end-declarations


	! form objective
	objective := W - sum(i in len_y)w(i) * a(i) - sum(i in len_y)y(i)*a(i)


	! form constraints
	sum(i in len_y)(w(i)*a(i)) <= W
	forall(i in len_y) a(i) >= 0
	forall(i in len_y) a(i) is_integer

	! solve the problem
	minimize(objective)

	! return the optimal objective value
	! the keyword returned is reserved for this purpose by Xpress
	returned := getobjval

	! return the optimal solution, save it in the array newPattern defined in the beginning of this model file
	!!!!!!!!!!!! write your code here !!!!!!!!!!!!!!!
	forall(i in len_y) do
		newPattern(i) := getsol(a(i))
	end-do




end-function





end-model