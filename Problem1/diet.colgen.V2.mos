model DietGen	! Name the model

uses "mmxprs"	! include the Xpress solver package
uses "mmodbc"	! include package to read from Excel


NumFoods := 7146	! declare how many foods we have
NumNutrients := 30	! declare how many nutrients we're tracking consumption of

declarations	! declare sets and arrays

	Foods = 1..NumFoods+1 				! We need an extra "dummy" food as we'll see later
	Nutrients = 1..NumNutrients

	FoodNames: array(Foods) of string		! names of each food
	NutNames: array(Nutrients) of string	! names of each nutrient

	Chol: array(Foods) of real				! vector of cholesterol for each food
	Calorie: array(Foods) of real				! vector of calorie for each food
	Contents: array(Foods,Nutrients) of real	! matrix of food content
	Minimums: array(Nutrients) of real			! minimum intake of each nutrient
	Maximums: array(Nutrients) of real	 		! maximum intake of each nutrient

	Eaten: dynamic array(Foods) of mpvar	! variables: amount of each food eaten
											! "dynamic" means we'll be generating variables
											! instead of defining them all up front

	minShadowPrices: array(Nutrients) of real		! array to hold the shadow prices of the minimum-intake constraints
	maxShadowPrices: array(Nutrients) of real		! array to hold the shadown prices of the maximum-intake constraints

	ColsGen: integer			! number of columns generated in the problem so far
	BestReducedCost: real		! what is the best reduced cost
	BestFood: integer			! which food has the best reduced cost
	TotalCalorie: real			! total calorie
	ReducedCost: real			! reduced cost
	TotalContent : array(Nutrients) of real			!array to hold the total nutrient contents

end-declarations	! end declarations section


initializations from "mmodbc.odbc:diet.V2.xls"	! read from Excel file

 FoodNames as "[a2:a7148]"	! NOTE: In the Excel file, the food names
 							! are in cells a3:a7148, not a2:a7148.
 							! For some reason, Xpress makes you always
							! include one row of cells above the data you
							! want to read.
							!	You'll see the same extra row in all of
							! these other things read from Excel.
 NutNames as "[b1:ae2]"
 Chol as "[ac2:ac7148]"
 Calorie as "[d2:d7148]"
 Contents as "[b2:ae7148]"
 Minimums as "[b7149:ae7150]"
 Maximums as "[b7151:ae7152]"

end-initializations


! We need to start with at least one column or else the problem
! will start off infeasible.  We'll use a "dummy" food as our
! initial column.  The dummy food will have a very high cost (1,000,000)
! and will contain all of the minimums necessary - that way we can be sure
! that by itself it will a be feasible solution.

forall(k in Nutrients)
	Contents(NumFoods+1,k) := Minimums(k)	! create contents of "dummy" food

FoodNames(NumFoods+1) := "DUMMY FOOD"
Chol(NumFoods+1) := 1000000


! Create the new (dummy food) variable.  Because the variables were
! declared as "dynamic" none of the other variables exist in the problem yet.

create(Eaten(NumFoods+1))

! Create minimum and maximum intake constraints.
! If all the variables existed, we could say
!       sum(j in Foods) Contents(j,k)*Eaten(j) <= Maximums(k).
! However, not all the variables Eaten(j) are created yet, so as new ones
! get created we'll have to add them to the constraints.
!   Below, we add the one variable we've created so far (the dummy variable) to
! each constraint.
!   These constraints need to be named ("EatMin(k)" and "EatMax(k)") because
! we'll need to get their shadow prices later, and for us to be able to ask
! Xpress for shadow prices we need a way to refer to the constraints.

forall(k in Nutrients) do
	EatMin(k) := Contents(NumFoods+1,k)*Eaten(NumFoods+1) >= Minimums(k)
	EatMax(k) := Contents(NumFoods+1,k)*Eaten(NumFoods+1) <= Maximums(k)
end-do


! Create objective function.  Just like the intake constraints, we'll have
! to add variables to it as they get generated.

TotalChol := Chol(NumFoods+1)*Eaten(NumFoods+1)


!!!!!!!!!!!! Begin column generation !!!!!!!!!!!!!!!!!!

ColsGen := 0
repeat
	writeln(ColsGen)
	! solve the problem using the variables that have been generated so far

	!!!!!!!!!!!!!! write your code here !!!!!!!!!!!!!!!!!!
	minimize(TotalChol)
	writeln("Total Cholesterol = ",getobjval)


	! get the shadow prices (dual prices) cB*Binverse
	!!!!!!!!!!!!!! write your code here !!!!!!!!!!!!!!!!!!

	forall(k in Nutrients) do
		minShadowPrices(k) := getdual(EatMin(k))
		maxShadowPrices(k) := getdual(EatMax(k))
	end-do


	! Find the food with the best reduced cost.
	!   As we search through each food, we'll keep track of the best reduced
	! cost found so far in BestReducedCost, and whatever food has that best
	! reduced cost will be stored in BestFood.

	BestReducedCost := 0
	BestFood := 0
	forall(j in Foods) do
			! if food j has a better (lower) reduced cost than the previous best,
			! then store its reduced cost in BestReducedCost and let BestFood be j.
			!!!!!!!!!!!!!! write your code here !!!!!!!!!!!!!!!!!!
			!reduced cost = cj - ctransposeB * Binv * Aj
			ReducedCost := Chol(j)
			forall(k in Nutrients)do
				ReducedCost := (ReducedCost - minShadowPrices(k) *Contents(j, k) - maxShadowPrices(k) *Contents(j, k))
			end-do
			



			if ReducedCost < BestReducedCost then
				BestReducedCost := ReducedCost
				BestFood := j
			end-if

	end-do

	writeln('minShadowPrices = ',minShadowPrices)
	writeln('maxShadowPrices = ',maxShadowPrices)

	! If there's a variable with a good reduced cost, then
	! 	create the variable
	!	update the number of columns generated
	!	update the constraints for each nutrient by adding the contents of the new food
	!	update the objective function by adding the cost of the new food

	if BestReducedCost < -0.000001 then
	!!!!!!!!!!!!!! write your code here !!!!!!!!!!!!!!!!!!)
		writeln("Adding food ",BestFood," (",FoodNames(BestFood),") : reduced cost is ",BestReducedCost)

		!create the variable
		create(Eaten(BestFood))

		!update number of columns generated
		ColsGen += 1

		!update the constraints for each nutrient by adding the contents of the new food
		forall(k in Nutrients) do
			EatMin(k) += Contents(BestFood,k)*Eaten(BestFood)
			EatMax(k) += Contents(BestFood,k)*Eaten(BestFood)
		end-do

		!update the objective function by adding the cost of the new food
		TotalChol += Chol(BestFood)*Eaten(BestFood)


	end-if


! Here and above ("if BestReducedCost < -0.000001") we use 0.000001 instead of 0.
! The reason is that floating point roundoff errors might make the computer
! calculate a reduced cost to be something like 0.000000000001 instead of 0.  This
! is normal -- most computer software has this sort of problem, and they use the
! same sort of checks to catch it.  Specifically, any value of x for which, say,
! -0.000000001 < x < 0.000000001 will be treated as 0.  For this application, we
! can safely use 0.000001 instead.
!   This is really a CS/computer architecture issue; if you're interested in
! learning more about what causes it, let me know and I'd be happy to explain more.

until BestReducedCost >= -0.000001	! continue until no variable has a good reduced cost


!!!!!!!!!!!! End column generation !!!!!!!!!!!!!!!!!!

! The solution can be long, so print a summary: only say what we eat.
TotalCalorie := 0
writeln("\n===============\n")
forall(j in Foods)
	if (getsol(Eaten(j)) > 0) then
		writeln(FoodNames(j)," = ",getsol(Eaten(j)))
		!writeln('Cholesterol = ', Chol(j))
		!!! you need to compute the total calorie for the chosen food !!!
		!!!!!!!!! write your code here !!!!!!!!!!!
		TotalCalorie += getsol(Eaten(j)*Calorie(j))
		forall(nut in 1..NumNutrients)
			TotalContent(nut) += getsol(Eaten(j)*Contents(j,nut))
	end-if
writeln("\nTotal Cholesterol = ",getobjval)
writeln("\nTotal Calorie = ", TotalCalorie)
writeln("\nTotal Nutrients:")
forall(nut in 1..NumNutrients)
	writeln(NutNames(nut)," = ", TotalContent(nut))
writeln("\nTotal: ",ColsGen," columns generated.")

end-model